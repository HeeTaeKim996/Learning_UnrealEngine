■ EnhancedInput
 	- All - Contents - Input 파일 참조.
	- IA 계열은, ValueType만 할당하면 됨 (bool, 1D, 2D, 3D..)
	- IMC 에서 세부 할당. 특히 Modifiers 의 Negate(부호 반대), SwizzleInputAxisValues ( 그냥 Y축 사용이라 이해하자) 
	- Build.cs 에서 모듈 EnhancedInput 추가 필요


■ ResourceManager

○ R1GameplayTags
	- 코드대로 따라하면 됨. .h 상단에 주석으로 설명

○ R1InputData
	- 코드대로 R1InputData 만든 후, All - Contents - Data - 에, Miscellenous - DataAsset 클릭해서, DA_InputData 추가. DA_InputData에, 코드 필드멤버대로, 할당
	- 예제에는 앞선 EnhancedInput 의 IMC 와 IA 를 할당함
	- 예제의 태그는 앞서 만든 R1GameplayTags에서 만든 태그들 할당함

○ R1AssetData
	- 코드대로 R1AssetData 만든 후, All - Contents - Data - 에, Miscellenous - DataAsset 클릭해서, PDA_AssetData 추가.
	- PDA_AssetData 들어가서, AssetGroup Name To set 입력 (예제는 Data), AssetName 입력 (예제는 InputData), AssetPath 에 앞서 만든 DA_InputData 할당, 
          AssetLabels 는 반드시 'Preload' 로 설정 (안그럼 추후 나올 AssetManager 에서 로드시, 라벨로 찾는데, 못찾음)

	- Edit - ProjectSettings 에서 'Primary Asset Types To Scan' 검색 - Primary Asset Types To Scan Array 하나 추가 클릭 - 
	  PrimaryAsset Type 은 반드시, 클래스명과 동일한 R1AssetData 로 할당. //  Asset Base Class 에 앞서 만든 R1AssetData 할당  
	 ( 두 할당값의, 첫번째의 String 과 두번째 클래스명이 반드시 동일해야 함)
	  - 이어서 Specific Assets 하나 추가하고, 앞서 만든 PDA_AssetData 추가

	- R1AssetData 의 세 함수는 이해 안하고 강의 코드 복붙만 함. 굳이 외울 필요 없음

 ○ R1GameInstance
	- 생성자에서 R1AssetManager::Initialize() 호출함수 추가

 ○ R1AssetManager
	- 강의 코드 모두 복붙. 이해하지 말자.. ( 강의자도 코드 이해가 아니라, 이미 만들어진 코드를 잘찾는, 서치 능력이 중요하다 하니.. 굳이 이해하려 하지 말자)

※ 추후 새로운 키를 추가할 때마다, IA 만들고, IMC 에 등록하고, Tag 추가하고, DA 에 만든 IA, Tag 추가하고, Cotnroller에 함수 매핑해야 함



■ 애니매이션
 - AnimInstance 를 상속받은 클래스를 만들고, ABP 만들기. 
 - 클래스 코드 치기
 - ABP 로 들어와서, 클래스에서 만든 변수를 보려면, 좌측 하단의 톱니바퀴 클릭 -> Show Inherited Variables 를 클릭 하면, 좌측 하단에 클래스에서 입력된 변수들이 나열됨

※ 애니매이션 루프 설정은, AnimGraph 에서 애니매이션 클릭시, 우측에 블루프린트 있는데, 그쪽에 bool LoopAnimation 이 있음 (물론 코드로도 가능하겠지만)

※ 애니매이션 재생 완료후 바로 다음 애니매이션으로 재생하도록 하려면, 넘어가는 화살표 들어가지말고, 클릭만 한 상태에서, 우측의 Details 의 Transition - AutomaticRuleBase 를 체크

※ Transition 이중 사용 가능 (And)

※ Additive : 언리얼 기본 제공 MM_LAND를 더블클릭해서 보면, 좌측에 AdditiveSettings 의 Additive Anim Type 이 LocalSpace 로 할당됨
		이는 혼자서 사용될 수 있는 애니매이션이 아니라 (혼자 사용되면 없는 것과 마찬가지), 애니매이션의 ApplyAdditive 노드와 함께 사용되는 애니매이션
		 (강의의 Land 애니매이션 참조)

※ Add State Alias (중요) : 어떤 상태에서든, 사용될 수 있도록, 상시 확인해주는 서브 개념. 클릭후 우측의 애니매이션을 체크하면, 해당 애니매이션일 때에는, 상시 감시상태로
				 다른 애니매이션이 재생될 수 있도록 체크 
				 ※ Alias 의 마지막 애니매이션에는, 기존 애니매이션으로 돌아가는 Transition을 만들지 않아도 된다. 엔진에서 자동으로 기존 애니로 돌아가도록 처리함

※ PriorityOrder		: Alias 에서 자주 사용되는데, 여러 애니매이션의 Transition 이 있기 때문에, 모두 만족할시, 어떤 애니매이션으로 갈지 에 대한 우선순위 에 대한 정수로. Transition
				 클릭시 우측 에 표시된다. 낮을 수록 우선. (언리얼 5.2. 이후 부터 표시됐다고 들음)

■ 리타겟팅
 ※ 생략함. 내용은 다른 본의 애니매이션을 사용하고 싶을 때, 둘을 매핑시켜, 애니매이션을 사용하는 방법. 강의 섹션5. 30. 리타겟팅 강의 참조

■ 애니매이션몽타주
 ※ 생략함. 유니티의 UpperBone, LowerBone 나눠서 애니매이션 재생시키는 거였나.. 그부분. 강의 섹션5. 31. 애니매이션 몽타주 참조.