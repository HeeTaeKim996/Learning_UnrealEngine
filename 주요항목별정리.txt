■ EnhancedInput
 	- All - Contents - Input 파일 참조.
	- IA 계열은, ValueType만 할당하면 됨 (bool, 1D, 2D, 3D..)
	- IMC 에서 세부 할당. 특히 Modifiers 의 Negate(부호 반대), SwizzleInputAxisValues ( 그냥 Y축 사용이라 이해하자) 
	- Build.cs 에서 모듈 EnhancedInput 추가 필요


■ ResourceManager

○ R1GameplayTags
	- 코드대로 따라하면 됨. .h 상단에 주석으로 설명

○ R1InputData
	- 코드대로 R1InputData 만든 후, All - Contents - Data - 에, Miscellenous - DataAsset 클릭해서, DA_InputData 추가. DA_InputData에, 코드 필드멤버대로, 할당
	- 예제에는 앞선 EnhancedInput 의 IMC 와 IA 를 할당함
	- 예제의 태그는 앞서 만든 R1GameplayTags에서 만든 태그들 할당함

○ R1AssetData
	- 코드대로 R1AssetData 만든 후, All - Contents - Data - 에, Miscellenous - DataAsset 클릭해서, PDA_AssetData 추가.
	- PDA_AssetData 들어가서, AssetGroup Name To set 입력 (예제는 Data), AssetName 입력 (예제는 InputData), AssetPath 에 앞서 만든 DA_InputData 할당, 
          AssetLabels 는 반드시 'Preload' 로 설정 (안그럼 추후 나올 AssetManager 에서 로드시, 라벨로 찾는데, 못찾음)

	- Edit - ProjectSettings 에서 'Primary Asset Types To Scan' 검색 - Primary Asset Types To Scan Array 하나 추가 클릭 - 
	  PrimaryAsset Type 은 반드시, 클래스명과 동일한 R1AssetData 로 할당. //  Asset Base Class 에 앞서 만든 R1AssetData 할당  
	 ( 두 할당값의, 첫번째의 String 과 두번째 클래스명이 반드시 동일해야 함)
	  - 이어서 Specific Assets 하나 추가하고, 앞서 만든 PDA_AssetData 추가

	- R1AssetData 의 세 함수는 이해 안하고 강의 코드 복붙만 함. 굳이 외울 필요 없음

 ○ R1GameInstance
	- 생성자에서 R1AssetManager::Initialize() 호출함수 추가

 ○ R1AssetManager
	- 강의 코드 모두 복붙. 이해하지 말자.. ( 강의자도 코드 이해가 아니라, 이미 만들어진 코드를 잘찾는, 서치 능력이 중요하다 하니.. 굳이 이해하려 하지 말자)